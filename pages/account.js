import react, { useEffect, useState } from "react";
import Head from "next/head";
import { View, Loader, Text } from "@aws-amplify/ui-react";
import { Amplify, API, Auth, graphqlOperation, withSSRContext } from "aws-amplify";
import { GRAPHQL_AUTH_MODE } from "@aws-amplify/api";
import styles from "../styles/Home.module.css";
import MessageForm from "../components/MessageForm";
import MessageApp from "../components/MessageApp";
import useAuthRedirect from "../hooks/useAuthRedirect";
import { RequireAuth } from "../components/RequireAuth";
import config from "../src/aws-exports";
Amplify.configure({ ...config, ssr: true });

export const onUpdateUser = /* GraphQL */ `
  subscription OnUpdateUser($filter: ModelSubscriptionUserFilterInput, $owner: String) {
    onUpdateUser(filter: $filter, owner: $owner) {
      id
      firstname
      lastname
      email
      sub
      listings {
        nextToken
        __typename
      }
      entries {
        items {
          id
          title
          issue
          region
        }
      }
      legacy
      migrated
      createdAt
      updatedAt
      owner
      __typename
    }
  }
`;

const getUser = /* GraphQL */ `
  query usersByEmail($email: AWSEmail!) {
    usersByEmail(email: $email) {
      items {
        id
        firstname
        lastname
        email
        sub
        legacy
        migrated
        entries {
          items {
            id
            title
            issue
            region
            owner
          }
        }
      }
    }
  }
`;

export async function getServerSideProps({ req }) {
  const SSR = withSSRContext({ req });

  SSR.Auth.configure({
    region: process.env.AUTH_REGION,
    userPoolId: process.env.AUTH_POOL,
    userPoolWebClientId: process.env.AUTH_POOL_CLIENT,
    mandatorySignIn: false,
  });

  try {
    const cognitoUser = await SSR.Auth.currentAuthenticatedUser();
    console.log("cognito user", cognitoUser.attributes.email);
    if (cognitoUser) {
      try {
        const { data, errors } = await SSR.API.graphql({
          query: getUser,
          variables: {
            email: cognitoUser.attributes.email,
          },
          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,
        });
        const user = data.usersByEmail.items[0];
        return {
          props: {
            user,
            errors: [],
          },
        };
      } catch (err) {
        console.log(err);
        throw new Error("couldn't fetch user");
      }
    }
  } catch (err) {
    console.log("SSR Error", err);
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }
}

export default function Account({ user, errors }) {
  const [napUser, setNapUser] = useState(user);
  const { authStatus, cognitoUser, signOut } = useAuthRedirect();

  useEffect(() => {
    let subscription;
    if (cognitoUser) {
      subscription = API.graphql(graphqlOperation(onUpdateUser, { owner: cognitoUser.attributes.sub })).subscribe({
        next: (userData) => {
          // When a use is updated, it will trigger this callback
          const updatedUser = userData.value.data.onUpdateUser;
          console.log("subscription User", userData);
          if (updatedUser) {
            setNapUser(updatedUser);
          }
        },
        error: (error) => {
          console.error("Subscription Error:", error);
        },
      });
    }

    return () => {
      // Unsubscribe when the component unmounts
      if (cognitoUser) {
        subscription.unsubscribe();
      }
    };
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <View>
          <h1 className={styles.title}>Account</h1>
          <RequireAuth>
            <View>
              <Text>Welcome</Text>
              {napUser.legacy && napUser.migrated ? (
                <pre>{JSON.stringify(napUser, null, 2)}</pre>
              ) : (
                <View>
                  <Text>Setting up Account</Text>
                  <Loader variation="linear" />
                </View>
              )}
            </View>
          </RequireAuth>
        </View>
      </main>
    </div>
  );
}
