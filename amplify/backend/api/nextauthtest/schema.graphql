# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type User
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"], operations: [read, create, update, delete] }]) {
  id: ID!
  firstname: String!
  lastname: String!
  email: AWSEmail! @index(name: "usersByEmail", queryField: "usersByEmail")
  sub: String!
}

type Issue
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read, create, update, delete], provider: iam }
    ]
  ) {
  id: ID!
  type: String!
    @default(value: "Issue")
    @index(name: "issuesByNumber", queryField: "issuesByNumber", sortKeyFields: ["number"])
  issue_id: Int!
  number: Int!
  date: String
  name: String
  release_date: AWSDateTime
}

type Blog
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: private, operations: [read], provider: iam }
      { allow: groups, groups: ["users"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  name: String!
  posts: [Post] @hasMany
}

type Post
  @model
  @auth(
    rules: [
      { allow: public, operations: [read], provider: iam }
      { allow: groups, groups: ["users"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  title: String!
  blog: Blog @belongsTo
  comments: [Comment] @hasMany
}

type Comment @model {
  id: ID!
  post: Post @belongsTo
  content: String!
}

type Message
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [create], provider: userPools }
      { allow: groups, groups: ["admin"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  senderEmail: AWSEmail!
  firstname: String
  lastname: String
  senderId: ID! @index(name: "messagesBySender", sortKeyFields: ["createdAt", "type"], queryField: "messagesBySender")
  recipients: [String!]
  recipientId: ID!
    @index(name: "messagesByRecipient", sortKeyFields: ["createdAt", "type"], queryField: "messagesByRecipient")
  threadId: ID
  type: MessageType!
  isRead: Boolean @default(value: "false")
  moderation: AWSJSON
  subject: String
  body: String
  isStarred: Boolean
  labels: [String]
  folder: String
  replies: AWSJSON
  cc: [String]
  attatchments: [String]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

enum MessageType {
  draft
  sent
  received
}

input SendMessageInput {
  senderEmail: AWSEmail!
  recipients: [String!]
  isRead: Boolean
  moderation: AWSJSON
  subject: String
  body: String
  isStarred: Boolean
  labels: [String]
  folder: String
  replies: AWSJSON
  cc: [String]
  attatchments: [String]
}

type Error {
  message: String
}

type SendMessageResponse {
  recipient: String
  status: String
  error: String
}

type Mutation {
  sendMessage(input: SendMessageInput!): [SendMessageResponse] @function(name: "customResolvers-${env}")
}
